#include <stdio.h>

#define N 128
#define THREADS_PER_BLOCK 32*32
#define TILE_DIM 32

__global__ void vector_add(int* A, int* B, int* C) {

    int valor_c = 0;

    int linha = blockIdx.y * TILE_DIM + threadIdx.y;
    int coluna = blockIdx.x * TILE_DIM + threadIdx.x;

    __shared__ int As[TILE_DIM * TILE_DIM];
    __shared__ int Bs[TILE_DIM * TILE_DIM];

    for (int k = 0; k < (TILE_DIM + N - 1)/TILE_DIM; k++) {

         if (k*TILE_DIM + threadIdx.x < N && linha < N)   
         	As[threadIdx.y * TILE_DIM + threadIdx.x] = A[linha*N + k*TILE_DIM + threadIdx.x];

         if (k*TILE_DIM + threadIdx.y < N && coluna < N) 
         	Bs[threadIdx.y * TILE_DIM + threadIdx.x] = B[(k*TILE_DIM + threadIdx.y)*N + coluna];

         __syncthreads();

         for (int i = 0; i < TILE_DIM; ++i) 
         	valor_c += As[threadIdx.y * TILE_DIM + i] * Bs[threadIdx.x * TILE_DIM + i];

         __syncthreads();
    }

    if (linha < N && coluna < N) 
    	C[((blockIdx.y * TILE_DIM + threadIdx.y * TILE_DIM)) + (blockIdx.x * TILE_DIM) + threadIdx.x] = valor_c;
}

int main()
{
	int *a, *b, *c;
	int *d_a, *d_b, *d_c;
	int size = N * sizeof(int);

	cudaMalloc( (void **) &d_a, N * size );
	cudaMalloc( (void **) &d_b, N * size );
	cudaMalloc( (void **) &d_c, N * size );

	a = (int *)malloc(N * size);
	b = (int *)malloc(N * size);
	c = (int *)malloc(N * size);

	for( int i = 0; i < N * N; i++)
	{
		a[i] = b[i] = i;
		c[i] = 0;
	}
	
	
	cudaMemcpy( d_a, a, N * size, cudaMemcpyHostToDevice );
	cudaMemcpy( d_b, b, N * size, cudaMemcpyHostToDevice );
	cudaMemcpy( d_c, c, N * size, cudaMemcpyHostToDevice );
	
	dim3 blocos = dim3((N + (THREADS_PER_BLOCK -1)) / THREADS_PER_BLOCK, (N + (THREADS_PER_BLOCK - 1)) / THREADS_PER_BLOCK, 1);
	dim3 t = dim3(128,128);

	vector_add<<< blocos,t >>>(d_a, d_b, d_c);

	cudaMemcpy( c, d_c, N * size, cudaMemcpyDeviceToHost );

	printf("c[0] = %d\n",c[0]);
	printf("c[%d] = %d\n", N*N-1, c[N*N-1]);

	free(a);
	free(b);
	free(c);

	cudaFree( d_a );
	cudaFree( d_b );
	cudaFree( d_c );

	cudaDeviceReset();

	return 0;
}
